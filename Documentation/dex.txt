@title %MAN% 1 2010

@h1 NAME

%PROGRAM%

@h1 SYNOPSIS

%PROGRAM% [-c command] [-t tag] [-r rcfile] [-V] [file]...

@h1 DESCRIPTION

A small and flexible text editor.

@h1 COMMAND LINE OPTIONS

-c command
	Run this command after reading the rc file and opening any files
	specified on command line.

-r rcfile
	Read this rc file instead of ~/.%PROGRAM%/rc or /usr/share/%PROGRAM%/rc.

-t tag
	Go to tag.  Requires tags file generated by Exuberant Ctags.

-R
	Don't read the rc file.

-V
	Display the version number and exit.

@h1 BASIC USAGE

Here's some of the default key bindings. *M-x* means meta-x or alt-x and
*^V* is ctrl-v. See /usr/share/%PROGRAM%/bindings/default for more keys.

	@li M-s
	select
	@li ^V
	select lines
	@li ^Y
	copy current line or selection
	@li ^D
	cut current line or selection
	@li ^P
	paste
	@li ^E
	undo
	@li ^R
	redo
	@li ^C
	enter command line
	@li M-/
	search
	@li M-n
	search next
	@li M-p
	search previous
	@li M-`N`
	activate `N`th tab

On the command line you can use tab to complete commands and most of
their parameters. Run *next* or *prev* to switch to next or previous
file. The commands *open*, *save* and *quit* should be obvious.

@h1 COMMANDS

alias <name> <command>
	Create an alias to command.

	Example:
		alias read "pass-through cat"

	Now you can run "read file.txt" to insert file.txt to current
	file.

bind <key> <command>
	Bind a key to command.

	A key is one of:
		Control key, for example "^C"

		Meta-key, for example "M-x" (alt-x)

		Key chain, for example "^X c" (press ^X first and then c)

		Special key

	Special keys:
		insert delete home end pgup pgdown left right up down f1
		f2 f3 f4 f5 f6 f7 f8 f9 f10 f11 f12 sleft sright

		sleft is shifted left arrow and sright is shifted right
		arrow.

bof
	Move to beginning of file.

bol
	Move to beginning of line.

case [-lmu]
	Change text case. Default is to change lower case to upper and
	vice versa.

	-l lower case

	-m move forward after the change

	-u upper case

cd <directory>
	Change directory. Updates $PWD and $OLDPWD.

center-view
	Center view to cursor.

clear
	Clear current line.

close [-f]
	Close file.

	-f close file even if it hasn't been saved after last modification

command [text]
	Enter command line. If text is given then it is written to the
	command line (see the default binding *^L* why this is useful).

compile [-1ps] <errorfmt> <command> [parameters]...
	Run external command and collect error messages. This can be
	used to run `make` and `grep`.

	-1 read error messages from stdout instead of stderr

	-p display "Press any key to continue" prompt

	-s silent. both stderr and stdout are redirected to /dev/null

	See also *errorfmt* and *msg* commands.

copy
	Copy current line or selection.

cut
	Cut current line or selection.

delete
	Delete character or selection.

delete-eol
	Delete to end of line.

delete-word [-s]
	Delete word after cursor.

	-s be more "aggressive"

down
	Move cursor down.

eof
	Move cursor to end of file.

eol
	Move cursor to end of line.

erase
	Erase character before cursor.

erase-bol
	Erase to beginning of line.

erase-word [-s]
	Erase word before cursor.

	-s be more "aggressive"

errorfmt [-i] <compiler> <regexp> [file|line|column|message]...

	-i ignore this error

	See *compile* and *msg* commands for more information.

filter <command> [parameter]...
	Filter selected text or whole file through external command.

	Example: filter sort -r

format-paragraph [width]
	Format the paragraph cursor is located on or selection. If
	paragraph width is not given then the *text-width* option is
	used.

ft <filetype> <extension>...
	Add extensions for filetype.

ft -c <filetype> <regexp>
	Detect filetype by matching the regexp against first line of
	file.

ft -f <filetype> <regexp>
	Detect filetype by matching the regexp against filename.

ft -i <filetype> <interpreter>...
	Connect interpreters to file type.  Interpreter is parsed
	from the #! line in many scripts.

hi <name> [fg-color [bg-color]]  [attribute]...
	Set highlight color.

	Colors: keep (-2) default (-1) black (0) red green yellow blue
	magenta cyan gray darkgray lightred lightgreen lightyellow
	lightblue lightmagenta lightcyan white

	Color can be given as a number too (-2..255).

	Attributes: bold lowintensity underline blink reverse invisible
	keep

	The color and attribute value "keep" is useful in selected text
	to keep fg-color and attributes and change only bg-color.

	NOTE: Because "keep" is both color and attribute you need to
	specify both fg-color and bg-color if you want to set the "keep"
	attribute.

	If you omit any color it is set to default (-1).

include <filename>
	Read commands from file.

insert [-km] <text>
	Insert text.

	-k insert one character at a time as if it has been typed

	-m move after inserted text

insert-special
	Insert special character.

	Insert control character,
	type decimal value of byte to insert or press
	*o* to insert octal byte value,
	*x* to insert hexadecimal byte value or
	*u* to insert hexadecimal unicode value.

join
	Join selection or next line to current.

left
	Move left.

line <number>
	Go to line.

load-syntax <filename|filetype>
	If argument contains / it is considered a filename.

move-tab <position|left|right>
	Move current tab to numeric position, left or right.

msg [-np]
	Show latest, next (-n) or previous (-p) message. If its location
	is known (compile error or tag message) then the file will be
	opened and cursor moved to the location.

	-n next message

	-p previous message

	See also *compile* and *tag* commands.

new-line
	Insert empty line under current line.

next
	Display next file.

open [file]...
	Open files. If filename is omitted a new file is opened.

option <filetype> <option value>...
	Add automatic options for filetype.

option [-r] <regexp> <option value>...
	Add automatic options for filenames matching regexp.

pass-through [-ms] <command> [parameter]...
	Run command and insert it's output.

	-m move after the inserted text

	-s strip newline from end of the command output

paste
	Paste.

pgdown
	Move cursor page down. See also *scroll-pagedown*.

pgup
	Move cursor page down. See also *scroll-pageup*.

prev
	Display previous file.

quit [-f]
	Quit.

	-f force quiting even if there are unsaved files

redo [choice]
	Redo given or latest undid change. If there are multiple
	possibilities an informative message is displayed:

		Redoing newest (2) of 2 possible changes.

	If the change was not the one you wanted, just run *undo* and
	then, for example, *redo 1*.

repeat <count> <command> [parameters]...
	Run command multiple times.

replace [-bcgi] <pattern> <replacement>

	-b use basic instead of extended regular expression syntax

	-c display confirmation before each replace

	-g replace all matching text from a line

	-i ignore case

right
	Move right.

run [-ps] <command> [parameters]...
	Run external command.

	-p display "Press any key to continue" prompt

	-s silent. both stderr and stdout are redirected to /dev/null

save [-dfu] [filename]
	Save file.  By default line-endings (LF vs CRLF) are preserved.

	-d save with DOS/CRLF line-endings

	-f force saving read-only file

	-u save with Unix/LF line-endings

scroll-down
	Scroll view down one line. Keeps cursor position unchanged if
	possible.

scroll-pgdown
	Scroll page down. Cursor's position relative to top of screen is
	maintained. See also *pgdown*.

scroll-pgup
	Scroll page up. Cursor's position relative to top of screen is
	maintained. See also *pgup*.

scroll-up
	Scroll view up one line. Keeps cursor position unchanged if
	possible.

search [-Hnprw] [pattern]
	If no flags or just -r and no pattern given then %PROGRAM% changes
	to search mode where you can type a regular expression to
	search.

	-H don't add search pattern to history (meaningful only with the
	search pattern given as argument)

	-n search next

	-p search previous

	-r start searching backwards

	-w search word under cursor

select [-bl]
	Start selecting.

	-b select code block starting from { and ending to }

	-l select whole lines

set [-gl] <option> [value]
	Set option value. Value can be omitted for boolean option to set
	it true.

	-g set only global option

	-l set only local (per-file) option

	Without neither -g nor -l both global and local value is set (if
	there are both, of course).

	In configuration files only global options can be set (no need
	to give any flags).

shift <count>
	Shift current or selected lines <count> indentation levels.
	Count is usually -1 (decrease indent) or 1 (increase indent).

suspend
	Suspend program. Usually bound to ^Z.

tag [-r] [tag]
	Save current location to stack and go to the location of tag.
	Requires tags file generated by Exuberant Ctags. If no tag is
	given then word under cursor is used as a tag instead.

	-r return back

	See also *msg* command.

toggle [-gv] <option> [value...]
	Toggle option. If list of values is not given then the option
	must be either boolean or enum.

	-g toggle global option instead of local

	-v display new value

	If option has both local and global value then local is toggled
	unless -g is given.

undo
	Undo latest change.

unselect
	Unselect.

up
	Move cursor up.

view <N|last>
	Display Nth or last open file.

word-bwd [-s]
	Move cursor backward one word.

	-s skip special characters

word-fwd [-s]
	Move cursor forward one word.

	-s skip special characters

@h1 OPTIONS

Options can be changed using the *set* command. Enumerated option values
can also be *toggle*d. To see which options are enumerated type "toggle "
on command line and press tab.

@h2 Local and global options

Global values of these options serve as default values for local
(per-file) options.

auto-indent [true]
	Automatically insert indentation when pressing enter.
	Indentation is copied from previous non-empty line.

emulate-tab [false]
	Make *delete*, *erase* and moving *left* and *right* inside
	indentation feel as if there were tabs instead of spaces.

expand-tab [false]
	Convert tab to spaces on insert.

file-history [true]
	Save line and column for each file to ~/.%PROGRAM%/file-history.

indent-width [8]
	Size of indentation in spaces.

syntax [true]
	Use syntax highlighting.

tab-width [8]
	Width of tab. Recommended value is 8. If you use other
	indentation size than 8 you should use spaces to indent.

text-width [72]
	Preferred with of text. Used as default value for
	*format-paragraph*.

ws-error 0
	Comma separated list of flags that describe what whitespace
	errors should be highlighted. Set to `0` to disable.

	trailing
		Display trailing whitespace as error.

	space-indent
		Display spaces in indentation as error. Note that this
		still allows using less than `tab-width` spaces at end
		of indentation for alignment.

	space-align
		Display spaces used as alignment after tabs in
		indentation as error.

	tab-indent
		Display tabs in indentation as errors. If you set this
		you most likely want to set `tab-after-indent` too.

	tab-after-indent
		Display tabs used anywhere else but indentation as
		errors.

	No-break space (U+00A0) is always displayed as on error because
	otherwise it can't be distinguished from space. It does not
	belong to text files and is often typed accidentally.

@h2 Local only options

filetype [none]
	Type of file. Value must be previously registered using the *ft*
	command.

utf8 false/true
	Whether to treat file data as UTF-8 or 8 bits per character.
	Other multi-byte character encodings are not supported.

	Value of this option is automatically detected from first
	non-ASCII bytes. For ASCII files the value depends on the
	current locale.

	Toggle this option if the detection fails. Changing this option
	does not convert data. Use the external command iconv if you
	need to change file encoding.

@h2 Global only options

newline [unix]
	Whether to use LF (`unix`) or CRLF (`dos`) line-endings. This is
	just a default value for new files.

statusline-left [" %f%s%m%r%s%M"]
	Format string for the left aligned part of status line.

	@li %f
	Filename.

	@li %m
	"\*" if file is has been modified since last save.

	@li %r
	"RO" if file is read-only.

	@li %y
	Cursor row.

	@li %x
	Cursor display column.

	@li %X
	Cursor column as characters. If it differs from cursor
	display column it is show too (e.g. "2-9").

	@li %c
	Decimal value of character under cursor.

	@li %C
	Hexadecimal value value of character under cursor.

	@li %p
	Position in percentage.

	@li %E
	Encoding (UTF-8 or 8-bit).

	@li %M
	Miscellaneous status information.

	@li %n
	Line-ending (LF or CRLF).

	@li %s
	Add separator.

	@li %t
	File type.

	@li %%
	Literal %.

statusline-right [" %y,%X   %c %C   %E %n %t   %p "]
	Format string for the right aligned part of status line.

display-special [false]
	Display special characters.

esc-timeout [100] 0...2000
	When single escape is read from the terminal %PROGRAM% waits some
	time before treating the escape as a single keypress. The
	timeout value is in milliseconds.

	Too long timeout makes escape key feel slow and too small
	timeout can cause escape sequences of for example arrow keys to
	be split and treated as multiple key presses.

show-line-numbers [false]
	Show line numbers.

show-tab-bar [true]
	Show tab bar at top of screen.

lock-files [true]
	Lock files using ~/.%PROGRAM%/file-locks. Only protects from your
	own mistakes (two processes editing same file).

scroll-margin [0]
	Minimum number of lines to keep visible before and after cursor.

case-sensitive-search [true]
	false
		Search is case-insensitive.
	true
		Search is case-sensitive.
	auto
		If search string contains a uppercase letter search is
		case-sensitive, otherwise it is case-insensitive.

@h1 COMMAND SYNTAX

Command syntax is similar to shell but simpler.

Commands are separated either by newline or ";" character. To make a
command span multiple lines in a rc file escape the newline (put \\ at end
of line).

Rc files can contain comments at beginning of line. Comment begins with
# character and can be indented, but you can't put comment on same line
with a command. This decision was made to make it possible to include #
in commands without escaping.

Commands can contain environment variables. Variable always expands into
a single argument even if it contains whitespace. Variables inside
single or double quotes are NOT expanded. This makes it possible to bind
a key to command which contains variable (inside single or double
quotes) and the variable is expanded just before the command is
executed.

Example:
	alias x "run chmod 755 $FILE"

$FILE is expanded when the alias x is executed. The command works even
if $FILE contains whitespace.

@h2 Special variables

These are always defined and override environment variables of same
name.

$PKGDATADIR
	Usually /usr/share/dex
$FILE
	Current file. Empty string if there's no filename.
$WORD
	Word under cursor. Empty string if cursor is not on a
	word.

@h2 Single quoted strings

Can't contain single quote, no escaping possible.

@h2 Double quoted strings
@li \\a
Bell
@li \\b
Backspace
@li \\t
Horizontal tab
@li \\n
New line
@li \\v
Vertical tab
@li \\f
Form feed
@li \\r
Carriage return
@li \\\\
Literal \\
@li \\x0a
Hexadecimal byte value 0x0a. Note that 0x00 is not supported because
strings are NUL-terminated.

@h1 COMMAND LINE

In command line you can use up and down arrows to browse command history
and tab to complete commands and most of their arguments.

Here's list of key bindings (totally obvious keys left out):

@li ^A
Go to beginning of command line.
@li ^B
Move left.
@li ^C
Leave command line.
@li ^D
Delete.
@li ^E
Go to end of command line.
@li ^F
Move right.
@li ^U
Delete to beginning of command line.
@li ^V
Insert special character.
@li ^W
Erase word.
@li ^Z
Suspend.

@h1 SEARCH MODE

Search pattern is an extended regular expression.

Same keys work as in command mode, plus these additional keys:

@li M-c
Toggle *case-sensitive-search* option.
@li M-r
Reverse search direction.

@h1 FILES

~/.%PROGRAM%/rc
	You personal configuration.

~/.%PROGRAM%/syntax/\*
	Your personal syntax files.  These override the syntax files which
	come with the program.

~/.%PROGRAM%/file-locks
	Records open files to protect you from accidentally editing file
	opened in another process. Used only if *lock-files* is true.

~/.%PROGRAM%/command-history and ~/.%PROGRAM%/search-history
	Command and search history.

~/.%PROGRAM%/file-history
	Last edited files and cursor positions.

/usr/share/%PROGRAM%/rc
	Copy to ~/.%PROGRAM%/rc and customize.

@h1 AUTHORS

Timo Hirvonen <tihirvon\@gmail.com>

@h1 SEE ALSO

%PROGRAM%-syntax(7)
